// -*- c -*-
// DO NOT MODIFY THIS FILE DIRECTLY.
// auto-generated file
//   by ./tool/mk_builtin_loader.rb
//   with dir.rb
#include "internal/compilers.h"     /* for MAYBE_UNUSED */
#include "internal/warnings.h"      /* for COMPILER_WARNING_PUSH */
#include "ruby/ruby.h"              /* for VALUE */
#include "builtin.h"                /* for RB_BUILTIN_FUNCTION */
struct rb_execution_context_struct; /* in vm_core.h */

static void
mjit_compile_invokebuiltin_for_dir_s_open(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 2);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIdPTR"; /* == dir_s_open */\n", (intptr_t)dir_s_open);
    fprintf(f, "    val = f(ec, self, argv[0], argv[1]);\n");
}

static void
mjit_compile_invokebuiltin_for_dir_s_close(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 1);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIdPTR"; /* == dir_s_close */\n", (intptr_t)dir_s_close);
    fprintf(f, "    val = f(ec, self, argv[0]);\n");
}

static void
mjit_compile_invokebuiltin_for_dir_initialize(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 2);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIdPTR"; /* == dir_initialize */\n", (intptr_t)dir_initialize);
    fprintf(f, "    val = f(ec, self, argv[0], argv[1]);\n");
}

static void
mjit_compile_invokebuiltin_for_dir_s_aref(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 3);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIdPTR"; /* == dir_s_aref */\n", (intptr_t)dir_s_aref);
    fprintf(f, "    val = f(ec, self, argv[0], argv[1], argv[2]);\n");
}

static void
mjit_compile_invokebuiltin_for_dir_s_glob(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE, VALUE, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 4);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIdPTR"; /* == dir_s_glob */\n", (intptr_t)dir_s_glob);
    fprintf(f, "    val = f(ec, self, argv[0], argv[1], argv[2], argv[3]);\n");
}

void Init_builtin_dir(void)
{
  // table definition
  static const struct rb_builtin_function dir_table[] = {
    RB_BUILTIN_FUNCTION(0, dir_s_open, dir_s_open, 2, mjit_compile_invokebuiltin_for_dir_s_open),
    RB_BUILTIN_FUNCTION(1, dir_s_close, dir_s_close, 1, mjit_compile_invokebuiltin_for_dir_s_close),
    RB_BUILTIN_FUNCTION(2, dir_initialize, dir_initialize, 2, mjit_compile_invokebuiltin_for_dir_initialize),
    RB_BUILTIN_FUNCTION(3, dir_s_aref, dir_s_aref, 3, mjit_compile_invokebuiltin_for_dir_s_aref),
    RB_BUILTIN_FUNCTION(4, dir_s_glob, dir_s_glob, 4, mjit_compile_invokebuiltin_for_dir_s_glob),
    RB_BUILTIN_FUNCTION(-1, NULL, NULL, 0, 0),
  };

  // arity_check
COMPILER_WARNING_PUSH
#if GCC_VERSION_SINCE(5, 1, 0) || __clang__
COMPILER_WARNING_ERROR(-Wincompatible-pointer-types)
#endif
  if (0) rb_builtin_function_check_arity2(dir_s_open);
  if (0) rb_builtin_function_check_arity1(dir_s_close);
  if (0) rb_builtin_function_check_arity2(dir_initialize);
  if (0) rb_builtin_function_check_arity3(dir_s_aref);
  if (0) rb_builtin_function_check_arity4(dir_s_glob);
COMPILER_WARNING_POP

  // load
  rb_load_with_builtin_functions("dir", dir_table);
}
