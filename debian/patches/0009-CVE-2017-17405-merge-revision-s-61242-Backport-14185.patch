From: usa <usa@b2dd03c8-39d4-4d8f-98ff-823fe69b080e>
Date: Thu, 14 Dec 2017 13:55:41 +0000
Subject: CVE-2017-17405 merge revision(s) 61242: [Backport #14185]

	Fix a command injection vulnerability in Net::FTP.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_3@61248 b2dd03c8-39d4-4d8f-98ff-823fe69b080e

Origin: upstream, 1cfe43fd85c66a9e2b5068480b3e043c31e6b8ca
Reviewed-by: Santiago R.R <santiagorr@riseup.net>
Signed-off-by: Santiago R.R <santiagorr@riseup.net>
---
 lib/net/ftp.rb           |  10 +-
 test/net/ftp/test_ftp.rb | 843 ++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 847 insertions(+), 6 deletions(-)

diff --git a/lib/net/ftp.rb b/lib/net/ftp.rb
index a57372a..aacdbac 100644
--- a/lib/net/ftp.rb
+++ b/lib/net/ftp.rb
@@ -608,10 +608,10 @@ module Net
       if localfile
         if @resume
           rest_offset = File.size?(localfile)
-          f = open(localfile, "a")
+          f = File.open(localfile, "a")
         else
           rest_offset = nil
-          f = open(localfile, "w")
+          f = File.open(localfile, "w")
         end
       elsif !block_given?
         result = ""
@@ -639,7 +639,7 @@ module Net
     def gettextfile(remotefile, localfile = File.basename(remotefile)) # :yield: line
       result = nil
       if localfile
-        f = open(localfile, "w")
+        f = File.open(localfile, "w")
       elsif !block_given?
         result = ""
       end
@@ -685,7 +685,7 @@ module Net
       else
         rest_offset = nil
       end
-      f = open(localfile)
+      f = File.open(localfile)
       begin
         f.binmode
         if rest_offset
@@ -704,7 +704,7 @@ module Net
     # passing in the transmitted data one line at a time.
     #
     def puttextfile(localfile, remotefile = File.basename(localfile), &block) # :yield: line
-      f = open(localfile)
+      f = File.open(localfile)
       begin
         storlines("STOR " + remotefile, f, &block)
       ensure
diff --git a/test/net/ftp/test_ftp.rb b/test/net/ftp/test_ftp.rb
index f25e107..fa64d77 100644
--- a/test/net/ftp/test_ftp.rb
+++ b/test/net/ftp/test_ftp.rb
@@ -2,6 +2,8 @@ require "net/ftp"
 require "test/unit"
 require "ostruct"
 require "stringio"
+require "tempfile"
+require "tmpdir"
 
 class FTPTest < Test::Unit::TestCase
   SERVER_ADDR = "127.0.0.1"
@@ -783,8 +785,835 @@ class FTPTest < Test::Unit::TestCase
     end
   end
 
-  private
+  def test_gettextfile_with_filename_and_block
+    commands = []
+    text_data = <<EOF.gsub(/\n/, "\r\n")
+foo
+bar
+baz
+EOF
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to ASCII mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      port_args = line.slice(/\APORT (.*)/, 1).split(/,/)
+      host = port_args[0, 4].join(".")
+      port = port_args[4, 2].map(&:to_i).inject {|x, y| (x << 8) + y}
+      sock.print("200 PORT command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("150 Opening TEXT mode data connection for foo (#{text_data.size} bytes)\r\n")
+      conn = TCPSocket.new(host, port)
+      text_data.each_line do |line|
+        conn.print(line)
+      end
+      conn.shutdown(Socket::SHUT_WR)
+      conn.read
+      conn.close
+      sock.print("226 Transfer complete.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        ftp.login
+        assert_match(/\AUSER /, commands.shift)
+        assert_match(/\APASS /, commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        Tempfile.create("foo", external_encoding: "ascii-8bit") do |f|
+          buf = String.new
+          res = ftp.gettextfile("foo", f.path) { |s|
+            buf << s << "\n"
+          }
+          assert_equal(nil, res)
+          assert_equal(text_data.gsub(/\r\n/, "\n"), buf)
+          assert_equal(Encoding::ASCII_8BIT, buf.encoding)
+          assert_equal(buf, f.read)
+        end
+        assert_equal("TYPE A\r\n", commands.shift)
+        assert_match(/\APORT /, commands.shift)
+        assert_equal("RETR foo\r\n", commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_getbinaryfile_in_list
+    commands = []
+    binary_data = (0..0xff).map {|i| i.chr}.join
+    list_lines = [
+      "-rw-r--r--    1 0        0               0 Mar 30 11:22 foo.txt",
+      "-rw-r--r--    1 0        0               0 Mar 30 11:22 bar.txt",
+      "-rw-r--r--    1 0        0               0 Mar 30 11:22 baz.bin"
+    ]
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to ASCII mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      port_args = line.slice(/\APORT (.*)/, 1).split(/,/)
+      host = port_args[0, 4].join(".")
+      port = port_args[4, 2].map(&:to_i).inject {|x, y| (x << 8) + y}
+      sock.print("200 PORT command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("150 Here comes the directory listing.\r\n")
+      conn = TCPSocket.new(host, port)
+      list_lines.each_with_index do |l, i|
+        conn.print(l, "\r\n")
+      end
+      conn.close
+      sock.print("226 Directory send OK.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      port_args = line.slice(/\APORT (.*)/, 1).split(/,/)
+      host = port_args[0, 4].join(".")
+      port = port_args[4, 2].map(&:to_i).inject {|x, y| (x << 8) + y}
+      sock.print("200 PORT command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\r\n")
+      conn = TCPSocket.new(host, port)
+      conn.print(binary_data)
+      conn.close
+      sock.print("226 Transfer complete.\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        ftp.login
+        assert_match(/\AUSER /, commands.shift)
+        assert_match(/\APASS /, commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        ftp.list do |line|
+          file = line.slice(/(\S*\.bin)\z/)
+          if file
+            data = ftp.getbinaryfile(file, nil)
+            assert_equal(binary_data, data)
+          end
+        end
+        assert_equal("TYPE A\r\n", commands.shift)
+        assert_match(/\APORT /, commands.shift)
+        assert_equal("LIST\r\n", commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        assert_match(/\APORT /, commands.shift)
+        assert_equal("RETR baz.bin\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_abort
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("225 No transfer to ABOR.\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        #ftp.read_timeout = 0.2
+        ftp.connect(SERVER_ADDR, server.port)
+        ftp.login
+        assert_match(/\AUSER /, commands.shift)
+        assert_match(/\APASS /, commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        ftp.abort
+        assert_equal("ABOR\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_status
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("211 End of status\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.read_timeout = 0.2
+        ftp.connect(SERVER_ADDR, server.port)
+        ftp.login
+        assert_match(/\AUSER /, commands.shift)
+        assert_match(/\APASS /, commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        ftp.status
+        assert_equal("STAT\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_pathnames
+    require 'pathname'
+
+    commands = []
+    server = create_ftp_server(0.2) { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("257 'foo' directory created.\r\n")
+      commands.push(sock.gets)
+      sock.print("250 CWD command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("250 CWD command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("250 RMD command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("213 test.txt  Fri, 11 Jan 2013 11:20:41 -0500.\r\n")
+      commands.push(sock.gets)
+      sock.print("213 test.txt  16.\r\n")
+      commands.push(sock.gets)
+      sock.print("350 File exists, ready for destination name\r\n")
+      commands.push(sock.gets)
+      sock.print("250 RNTO command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("250 DELE command successful.\r\n")
+    }
+
+    begin
+      begin
+        dir   = Pathname.new("foo")
+        file  = Pathname.new("test.txt")
+        file2 = Pathname.new("test2.txt")
+        ftp   = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        ftp.login
+        ftp.mkdir(dir)
+        ftp.chdir(dir)
+        ftp.chdir("..")
+        ftp.rmdir(dir)
+        ftp.mdtm(file)
+        ftp.size(file)
+        ftp.rename(file, file2)
+        ftp.delete(file)
+
+        # TODO: These commented tests below expose the error but don't test anything:
+        #   TypeError: no implicit conversion of Pathname into String
+        # ftp.nlst(dir)
+        # ftp.putbinaryfile(Pathname.new("/etc/hosts"), file2)
+        # ftp.puttextfile(Pathname.new("/etc/hosts"), file2)
+        # ftp.gettextfile(Pathname.new("/etc/hosts"), file2)
+        # ftp.getbinaryfile(Pathname.new("/etc/hosts"), file2)
+        # ftp.list(dir, dir, dir)
+
+        assert_match(/\AUSER /, commands.shift)
+        assert_match(/\APASS /, commands.shift)
+        assert_match(/\ATYPE /, commands.shift)
+        assert_match(/\AMKD /, commands.shift)
+        assert_match(/\ACWD /, commands.shift)
+        assert_match(/\ACDUP/, commands.shift)
+        assert_match(/\ARMD /, commands.shift)
+        assert_match(/\AMDTM /, commands.shift)
+        assert_match(/\ASIZE /, commands.shift)
+        assert_match(/\ARNFR /, commands.shift)
+        assert_match(/\ARNTO /, commands.shift)
+        assert_match(/\ADELE /, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_getmultiline
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      sock.print("123- foo\r\n")
+      sock.print("bar\r\n")
+      sock.print(" 123 baz\r\n")
+      sock.print("123 quux\r\n")
+      sock.print("123 foo\r\n")
+      sock.print("foo\r\n")
+      sock.print("\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        assert_equal("123- foo\nbar\n 123 baz\n123 quux\n",
+                     ftp.send(:getmultiline))
+        assert_equal("123 foo\n", ftp.send(:getmultiline))
+        assert_equal("foo\n", ftp.send(:getmultiline))
+        assert_equal("\n", ftp.send(:getmultiline))
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_size
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("213 12345\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        assert_equal(12345, ftp.size("foo.txt"))
+        assert_match("SIZE foo.txt\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_mdtm
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("213 20150910161739\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        assert_equal("20150910161739", ftp.mdtm("foo.txt"))
+        assert_match("MDTM foo.txt\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_mtime
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("213 20150910161739\r\n")
+      commands.push(sock.gets)
+      sock.print("213 20150910161739\r\n")
+      commands.push(sock.gets)
+      sock.print("213 20150910161739.123456\r\n")
+      commands.push(sock.gets)
+      sock.print("213 20150910161739.123\r\n")
+      commands.push(sock.gets)
+      sock.print("213 20150910161739.123456789\r\n")
+      commands.push(sock.gets)
+      sock.print("213 2015091016173\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        assert_equal(Time.utc(2015, 9, 10, 16, 17, 39), ftp.mtime("foo.txt"))
+        assert_equal(Time.local(2015, 9, 10, 16, 17, 39),
+                     ftp.mtime("foo.txt", true))
+        assert_equal(Time.utc(2015, 9, 10, 16, 17, 39, 123456),
+                     ftp.mtime("bar.txt"))
+        assert_equal(Time.utc(2015, 9, 10, 16, 17, 39, 123000),
+                     ftp.mtime("bar.txt"))
+        assert_equal(Time.utc(2015, 9, 10, 16, 17, 39,
+                              Rational(123456789, 1000)),
+                     ftp.mtime("bar.txt"))
+        assert_raise(Net::FTPProtoError) do
+          ftp.mtime("quux.txt")
+        end
+        assert_match("MDTM foo.txt\r\n", commands.shift)
+        assert_match("MDTM foo.txt\r\n", commands.shift)
+        assert_match("MDTM bar.txt\r\n", commands.shift)
+        assert_match("MDTM bar.txt\r\n", commands.shift)
+        assert_match("MDTM bar.txt\r\n", commands.shift)
+        assert_match("MDTM quux.txt\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
 
+  def test_system
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("215 UNIX Type: L8\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        assert_equal("UNIX Type: L8", ftp.system)
+        assert_match("SYST\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_mlst
+    commands = []
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("250- Listing foo\r\n")
+      sock.print(" Type=file;Unique=FC00U1E554A;Size=1234567;Modify=20131220035929;Perm=r;Unix.mode=0644;Unix.owner=122;Unix.group=0;Unix.ctime=20131220120140;Unix.atime=20131220131139; /foo\r\n")
+      sock.print("250 End\r\n")
+      commands.push(sock.gets)
+      sock.print("250 Malformed response\r\n")
+      commands.push(sock.gets)
+      sock.print("250- Listing foo\r\n")
+      sock.print("\r\n")
+      sock.print("250 End\r\n")
+      commands.push(sock.gets)
+      sock.print("250- Listing foo\r\n")
+      sock.print(" abc /foo\r\n")
+      sock.print("250 End\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        entry = ftp.mlst("foo")
+        assert_equal("/foo", entry.pathname)
+        assert_equal("file", entry.facts["type"])
+        assert_equal("FC00U1E554A", entry.facts["unique"])
+        assert_equal(1234567, entry.facts["size"])
+        assert_equal("r", entry.facts["perm"])
+        assert_equal(0644, entry.facts["unix.mode"])
+        assert_equal(122, entry.facts["unix.owner"])
+        assert_equal(0, entry.facts["unix.group"])
+        modify = entry.facts["modify"]
+        assert_equal(2013, modify.year)
+        assert_equal(12, modify.month)
+        assert_equal(20, modify.day)
+        assert_equal(3, modify.hour)
+        assert_equal(59, modify.min)
+        assert_equal(29, modify.sec)
+        assert_equal(true, modify.utc?)
+        ctime = entry.facts["unix.ctime"]
+        assert_equal(12, ctime.hour)
+        assert_equal(1, ctime.min)
+        assert_equal(40, ctime.sec)
+        atime = entry.facts["unix.atime"]
+        assert_equal(13, atime.hour)
+        assert_equal(11, atime.min)
+        assert_equal(39, atime.sec)
+        assert_match("MLST foo\r\n", commands.shift)
+        assert_raise(Net::FTPProtoError) do
+          ftp.mlst("foo")
+        end
+        assert_match("MLST foo\r\n", commands.shift)
+        assert_raise(Net::FTPProtoError) do
+          ftp.mlst("foo")
+        end
+        assert_match("MLST foo\r\n", commands.shift)
+        entry = ftp.mlst("foo")
+        assert_equal("/foo", entry.pathname)
+        assert_match("MLST foo\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_mlsd
+    commands = []
+    entry_lines = [
+      "Type=file;Unique=FC00U1E554A;Size=1234567;Modify=20131220035929.123456;Perm=r; foo bar",
+      "Type=cdir;Unique=FC00U1E554B;Modify=20131220035929;Perm=flcdmpe; .",
+      "Type=pdir;Unique=FC00U1E554C;Modify=20131220035929;Perm=flcdmpe; ..",
+    ]
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to ASCII mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      port_args = line.slice(/\APORT (.*)/, 1).split(/,/)
+      host = port_args[0, 4].join(".")
+      port = port_args[4, 2].map(&:to_i).inject {|x, y| (x << 8) + y}
+      sock.print("200 PORT command successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("150 Here comes the directory listing.\r\n")
+      begin
+        conn = TCPSocket.new(host, port)
+        entry_lines.each do |line|
+          conn.print(line, "\r\n")
+        end
+      rescue Errno::EPIPE
+      ensure
+        assert_nil($!)
+        conn.close
+      end
+      sock.print("226 Directory send OK.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+    }
+    begin
+      begin
+        ftp = Net::FTP.new
+        ftp.connect(SERVER_ADDR, server.port)
+        ftp.login
+        assert_match(/\AUSER /, commands.shift)
+        assert_match(/\APASS /, commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        entries = ftp.mlsd("/")
+        assert_equal(3, entries.size)
+        assert_equal("foo bar", entries[0].pathname)
+        assert_equal(".", entries[1].pathname)
+        assert_equal("..", entries[2].pathname)
+        assert_equal("file", entries[0].facts["type"])
+        assert_equal("cdir", entries[1].facts["type"])
+        assert_equal("pdir", entries[2].facts["type"])
+        assert_equal("flcdmpe", entries[1].facts["perm"])
+        modify = entries[0].facts["modify"]
+        assert_equal(2013, modify.year)
+        assert_equal(12, modify.month)
+        assert_equal(20, modify.day)
+        assert_equal(3, modify.hour)
+        assert_equal(59, modify.min)
+        assert_equal(29, modify.sec)
+        assert_equal(123456, modify.usec)
+        assert_equal(true, modify.utc?)
+        assert_equal("TYPE A\r\n", commands.shift)
+        assert_match(/\APORT /, commands.shift)
+        assert_match("MLSD /\r\n", commands.shift)
+        assert_equal("TYPE I\r\n", commands.shift)
+        assert_equal(nil, commands.shift)
+      ensure
+        ftp.close if ftp
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_parse257
+    ftp = Net::FTP.new
+    assert_equal('/foo/bar',
+                 ftp.send(:parse257, '257 "/foo/bar" directory created'))
+    assert_equal('/foo/bar"baz',
+                 ftp.send(:parse257, '257 "/foo/bar""baz" directory created'))
+    assert_equal('/foo/x"y"z',
+                 ftp.send(:parse257, '257 "/foo/x""y""z" directory created'))
+    assert_equal('/foo/bar',
+                 ftp.send(:parse257, '257 "/foo/bar" "comment"'))
+    assert_equal('',
+                 ftp.send(:parse257, '257 "" directory created'))
+    assert_equal('',
+                 ftp.send(:parse257, '257 directory created'))
+    assert_raise(Net::FTPReplyError) do
+      ftp.send(:parse257, "500 Syntax error")
+    end
+  end
+
+  def test_putline_reject_crlf
+    ftp = Net::FTP.new
+    assert_raise(ArgumentError) do
+      ftp.send(:putline, "\r")
+    end
+    assert_raise(ArgumentError) do
+      ftp.send(:putline, "\n")
+    end
+  end
+
+  def test_getbinaryfile_command_injection
+    skip "| is not allowed in filename on Windows" if windows?
+    [false, true].each do |resume|
+      commands = []
+      binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3
+      server = create_ftp_server { |sock|
+        sock.print("220 (test_ftp).\r\n")
+        commands.push(sock.gets)
+        sock.print("331 Please specify the password.\r\n")
+        commands.push(sock.gets)
+        sock.print("230 Login successful.\r\n")
+        commands.push(sock.gets)
+        sock.print("200 Switching to Binary mode.\r\n")
+        line = sock.gets
+        commands.push(line)
+        host, port = process_port_or_eprt(sock, line)
+        commands.push(sock.gets)
+        sock.print("150 Opening BINARY mode data connection for |echo hello (#{binary_data.size} bytes)\r\n")
+        conn = TCPSocket.new(host, port)
+        binary_data.scan(/.{1,1024}/nm) do |s|
+          conn.print(s)
+        end
+        conn.shutdown(Socket::SHUT_WR)
+        conn.read
+        conn.close
+        sock.print("226 Transfer complete.\r\n")
+      }
+      begin
+        chdir_to_tmpdir do
+          begin
+            ftp = Net::FTP.new
+            ftp.resume = resume
+            ftp.read_timeout = 0.2
+            ftp.connect(SERVER_ADDR, server.port)
+            ftp.login
+            assert_match(/\AUSER /, commands.shift)
+            assert_match(/\APASS /, commands.shift)
+            assert_equal("TYPE I\r\n", commands.shift)
+            ftp.getbinaryfile("|echo hello")
+            assert_equal(binary_data, File.binread("./|echo hello"))
+            assert_match(/\A(PORT|EPRT) /, commands.shift)
+            assert_equal("RETR |echo hello\r\n", commands.shift)
+            assert_equal(nil, commands.shift)
+          ensure
+            ftp.close if ftp
+          end
+        end
+      ensure
+        server.close
+      end
+    end
+  end
+
+  def test_gettextfile_command_injection
+    skip "| is not allowed in filename on Windows" if windows?
+    commands = []
+    text_data = <<EOF.gsub(/\n/, "\r\n")
+foo
+bar
+baz
+EOF
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to ASCII mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      host, port = process_port_or_eprt(sock, line)
+      commands.push(sock.gets)
+      sock.print("150 Opening TEXT mode data connection for |echo hello (#{text_data.size} bytes)\r\n")
+      conn = TCPSocket.new(host, port)
+      text_data.each_line do |l|
+        conn.print(l)
+      end
+      conn.shutdown(Socket::SHUT_WR)
+      conn.read
+      conn.close
+      sock.print("226 Transfer complete.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+    }
+    begin
+      chdir_to_tmpdir do
+        begin
+          ftp = Net::FTP.new
+          ftp.connect(SERVER_ADDR, server.port)
+          ftp.login
+          assert_match(/\AUSER /, commands.shift)
+          assert_match(/\APASS /, commands.shift)
+          assert_equal("TYPE I\r\n", commands.shift)
+          ftp.gettextfile("|echo hello")
+          assert_equal(text_data.gsub(/\r\n/, "\n"),
+                       File.binread("./|echo hello"))
+          assert_equal("TYPE A\r\n", commands.shift)
+          assert_match(/\A(PORT|EPRT) /, commands.shift)
+          assert_equal("RETR |echo hello\r\n", commands.shift)
+          assert_equal("TYPE I\r\n", commands.shift)
+          assert_equal(nil, commands.shift)
+        ensure
+          ftp.close if ftp
+        end
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_putbinaryfile_command_injection
+    skip "| is not allowed in filename on Windows" if windows?
+    commands = []
+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3
+    received_data = nil
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      host, port = process_port_or_eprt(sock, line)
+      commands.push(sock.gets)
+      sock.print("150 Opening BINARY mode data connection for |echo hello (#{binary_data.size} bytes)\r\n")
+      conn = TCPSocket.new(host, port)
+      received_data = conn.read
+      conn.close
+      sock.print("226 Transfer complete.\r\n")
+    }
+    begin
+      chdir_to_tmpdir do
+        File.binwrite("./|echo hello", binary_data)
+        begin
+          ftp = Net::FTP.new
+          ftp.read_timeout = 0.2
+          ftp.connect(SERVER_ADDR, server.port)
+          ftp.login
+          assert_match(/\AUSER /, commands.shift)
+          assert_match(/\APASS /, commands.shift)
+          assert_equal("TYPE I\r\n", commands.shift)
+          ftp.putbinaryfile("|echo hello")
+          assert_equal(binary_data, received_data)
+          assert_match(/\A(PORT|EPRT) /, commands.shift)
+          assert_equal("STOR |echo hello\r\n", commands.shift)
+          assert_equal(nil, commands.shift)
+        ensure
+          ftp.close if ftp
+        end
+      end
+    ensure
+      server.close
+    end
+  end
+
+  def test_puttextfile_command_injection
+    skip "| is not allowed in filename on Windows" if windows?
+    commands = []
+    received_data = nil
+    server = create_ftp_server { |sock|
+      sock.print("220 (test_ftp).\r\n")
+      commands.push(sock.gets)
+      sock.print("331 Please specify the password.\r\n")
+      commands.push(sock.gets)
+      sock.print("230 Login successful.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to ASCII mode.\r\n")
+      line = sock.gets
+      commands.push(line)
+      host, port = process_port_or_eprt(sock, line)
+      commands.push(sock.gets)
+      sock.print("150 Opening TEXT mode data connection for |echo hello\r\n")
+      conn = TCPSocket.new(host, port)
+      received_data = conn.read
+      conn.close
+      sock.print("226 Transfer complete.\r\n")
+      commands.push(sock.gets)
+      sock.print("200 Switching to Binary mode.\r\n")
+    }
+    begin
+      chdir_to_tmpdir do
+        File.open("|echo hello", "w") do |f|
+          f.puts("foo")
+          f.puts("bar")
+          f.puts("baz")
+        end
+        begin
+          ftp = Net::FTP.new
+          ftp.connect(SERVER_ADDR, server.port)
+          ftp.login
+          assert_match(/\AUSER /, commands.shift)
+          assert_match(/\APASS /, commands.shift)
+          assert_equal("TYPE I\r\n", commands.shift)
+          ftp.puttextfile("|echo hello")
+          assert_equal(<<EOF.gsub(/\n/, "\r\n"), received_data)
+foo
+bar
+baz
+EOF
+          assert_equal("TYPE A\r\n", commands.shift)
+          assert_match(/\A(PORT|EPRT) /, commands.shift)
+          assert_equal("STOR |echo hello\r\n", commands.shift)
+          assert_equal("TYPE I\r\n", commands.shift)
+          assert_equal(nil, commands.shift)
+        ensure
+          ftp.close if ftp
+        end
+      end
+    ensure
+      server.close
+    end
+  end
+
+  private
 
   def create_ftp_server(sleep_time = nil)
     server = TCPServer.new(SERVER_ADDR, 0)
@@ -810,4 +1639,16 @@ class FTPTest < Test::Unit::TestCase
     end
     return server
   end
+
+  def chdir_to_tmpdir
+    Dir.mktmpdir do |dir|
+      pwd = Dir.pwd
+      Dir.chdir(dir)
+      begin
+        yield
+      ensure
+        Dir.chdir(pwd)
+      end
+    end
+  end
 end
