Index: ruby2.1-2.1.5/pack.c
===================================================================
--- ruby2.1-2.1.5.orig/pack.c	2018-10-27 22:45:00.994581433 +0200
+++ ruby2.1-2.1.5/pack.c	2018-10-28 13:54:05.820838407 +0100
@@ -858,6 +858,7 @@
 	    StringValue(from);
 	    ptr = RSTRING_PTR(from);
 	    plen = RSTRING_LEN(from);
+	    OBJ_INFECT(res, from);
 
 	    if (len == 0 && type == 'm') {
 		encodes(res, ptr, plen, type, 0);
@@ -885,6 +886,7 @@
 
 	  case 'M':		/* quoted-printable encoded string */
 	    from = rb_obj_as_string(NEXTFROM);
+	    OBJ_INFECT(res, from);
 	    if (len <= 1)
 		len = 72;
 	    qpencode(res, from, len);
@@ -910,6 +912,7 @@
 		}
 		else {
 		    t = StringValuePtr(from);
+		    OBJ_INFECT(res, from);
 		}
 		if (!associates) {
 		    associates = rb_ary_new();
@@ -1379,6 +1382,7 @@
 		    len = (send - s) * 8;
 		bits = 0;
 		UNPACK_PUSH(bitstr = rb_usascii_str_new(0, len));
+                OBJ_INFECT(bitstr, str);
 		t = RSTRING_PTR(bitstr);
 		for (i=0; i<len; i++) {
 		    if (i & 7) bits >>= 1;
@@ -1399,6 +1403,7 @@
 		    len = (send - s) * 8;
 		bits = 0;
 		UNPACK_PUSH(bitstr = rb_usascii_str_new(0, len));
+                OBJ_INFECT(bitstr, str);
 		t = RSTRING_PTR(bitstr);
 		for (i=0; i<len; i++) {
 		    if (i & 7) bits <<= 1;
@@ -1419,6 +1424,7 @@
 		    len = (send - s) * 2;
 		bits = 0;
 		UNPACK_PUSH(bitstr = rb_usascii_str_new(0, len));
+                OBJ_INFECT(bitstr, str);
 		t = RSTRING_PTR(bitstr);
 		for (i=0; i<len; i++) {
 		    if (i & 1)
@@ -1441,6 +1447,7 @@
 		    len = (send - s) * 2;
 		bits = 0;
 		UNPACK_PUSH(bitstr = rb_usascii_str_new(0, len));
+                OBJ_INFECT(bitstr, str);
 		t = RSTRING_PTR(bitstr);
 		for (i=0; i<len; i++) {
 		    if (i & 1)
Index: ruby2.1-2.1.5/test/ruby/test_pack.rb
===================================================================
--- ruby2.1-2.1.5.orig/test/ruby/test_pack.rb	2018-10-27 22:45:00.994581433 +0200
+++ ruby2.1-2.1.5/test/ruby/test_pack.rb	2018-10-28 13:53:34.000000000 +0100
@@ -712,4 +712,20 @@
     $VERBOSE = verbose
   end
 
+  def test_pack_infection
+    tainted_array_string = ["123456"]
+    tainted_array_string.first.taint
+    ['a', 'A', 'Z', 'B', 'b', 'H', 'h', 'u', 'M', 'm', 'P', 'p'].each do |f|
+      assert_predicate(tainted_array_string.pack(f), :tainted?)
+    end
+  end
+
+  def test_unpack_infection
+    tainted_string = "123456"
+    tainted_string.taint
+    ['a', 'A', 'Z', 'B', 'b', 'H', 'h', 'u', 'M', 'm'].each do |f|
+      assert_predicate(tainted_string.unpack(f).first, :tainted?)
+    end
+  end
+
 end
