From: Lucas Kanashiro <kanashiro@debian.org>
Date: Fri, 1 Nov 2019 16:07:51 -0300
Subject: Port to kfreebsd-amd64

Closes: #899267

Signed-off-by: Antonio Terceiro <terceiro@debian.org>
Signed-off-by: Svante Signell <svante.signell@gmail.com>
---
 ext/socket/option.c        |  1 +
 ext/socket/raddrinfo.c     | 22 ++++++++++++++++++++++
 test/fiddle/test_handle.rb |  3 ++-
 test/socket/test_socket.rb |  2 +-
 4 files changed, 26 insertions(+), 2 deletions(-)

--- a/ext/socket/option.c
+++ b/ext/socket/option.c
@@ -10,6 +10,7 @@
 #if defined(__linux__) || \
     defined(__GNU__) /* GNU/Hurd */ || \
     defined(__FreeBSD__) || \
+    defined(__FreeBSD_kernel__) || \
     defined(__DragonFly__) || \
     defined(__APPLE__) || \
     defined(_WIN32) || \
--- a/ext/socket/raddrinfo.c
+++ b/ext/socket/raddrinfo.c
@@ -1722,10 +1722,21 @@
         INIT_SOCKADDR_UN(&uaddr, sizeof(struct sockaddr_un));
 
         StringValue(v);
+#ifdef __FreeBSD_kernel__
+       /* sys/un.h defines struct sockaddr_un as:
+          char sun_path[104];
+          char __sun_user_compat[4];
+       */
+        if (sizeof(uaddr.sun_path) + 4 < (size_t)RSTRING_LEN(v))
+            rb_raise(rb_eSocket,
+                "too long AF_UNIX path (%"PRIuSIZE" bytes given but %"PRIuSIZE" bytes max)",
+                (size_t)RSTRING_LEN(v), sizeof(uaddr.sun_path) + 4);
+#else
         if (sizeof(uaddr.sun_path) < (size_t)RSTRING_LEN(v))
             rb_raise(rb_eSocket,
                 "too long AF_UNIX path (%"PRIuSIZE" bytes given but %"PRIuSIZE" bytes max)",
                 (size_t)RSTRING_LEN(v), sizeof(uaddr.sun_path));
+#endif
         memcpy(uaddr.sun_path, RSTRING_PTR(v), RSTRING_LEN(v));
         len = (socklen_t)sizeof(uaddr);
         memcpy(&ss, &uaddr, len);
@@ -2369,10 +2380,21 @@
     if (n < 0)
         rb_raise(rb_eSocket, "too short AF_UNIX address: %"PRIuSIZE" bytes given for minimum %"PRIuSIZE" bytes.",
                  (size_t)rai->sockaddr_len, offsetof(struct sockaddr_un, sun_path));
+#ifdef __FreeBSD_kernel__
+       /* sys/un.h defines struct sockaddr_un as:
+          char sun_path[104];
+          char __sun_user_compat[4];
+       */
+    if ((long)sizeof(addr->sun_path) + 4 < n)
+        rb_raise(rb_eSocket,
+            "too long AF_UNIX path (%"PRIuSIZE" bytes given but %"PRIuSIZE" bytes max)",
+            (size_t)n, sizeof(addr->sun_path) + 4);
+#else
     if ((long)sizeof(addr->sun_path) < n)
         rb_raise(rb_eSocket,
             "too long AF_UNIX path (%"PRIuSIZE" bytes given but %"PRIuSIZE" bytes max)",
             (size_t)n, sizeof(addr->sun_path));
+#endif
     return rb_str_new(addr->sun_path, n);
 }
 #endif
--- a/test/fiddle/test_handle.rb
+++ b/test/fiddle/test_handle.rb
@@ -178,6 +178,7 @@
     end unless /mswin|mingw/ =~ RUBY_PLATFORM
 
     def test_dlerror
+      return if /kfreebsd/ =~ RUBY_PLATFORM
       # FreeBSD (at least 7.2 to 7.2) calls nsdispatch(3) when it calls
       # getaddrinfo(3). And nsdispatch(3) doesn't call dlerror(3) even if
       # it calls _nss_cache_cycle_prevention_function with dlsym(3).
@@ -186,7 +187,7 @@
       require 'socket'
       Socket.gethostbyname("localhost")
       Fiddle.dlopen("/lib/libc.so.7").sym('strcpy')
-    end if /freebsd/=~ RUBY_PLATFORM
+    end if /freebsd/ =~ RUBY_PLATFORM
 
     def test_no_memory_leak
       # https://github.com/ruby/fiddle/actions/runs/3202406059/jobs/5231356410
--- a/test/socket/test_socket.rb
+++ b/test/socket/test_socket.rb
@@ -541,7 +541,7 @@
   end
 
   def test_bintime
-    return if /freebsd/ !~ RUBY_PLATFORM
+    return if /freebsd/ !~ RUBY_PLATFORM || /kfreebsd/ =~ RUBY_PLATFORM
     t1 = Time.now.strftime("%Y-%m-%d")
     stamp = nil
     Addrinfo.udp("127.0.0.1", 0).bind {|s1|
