Index: ruby2.1-2.1.5/lib/webrick/httpresponse.rb
===================================================================
--- ruby2.1-2.1.5.orig/lib/webrick/httpresponse.rb	2019-11-21 18:07:35.292175854 +0100
+++ ruby2.1-2.1.5/lib/webrick/httpresponse.rb	2019-11-21 18:07:35.284175458 +0100
@@ -366,7 +366,8 @@
     private
 
     def check_header(header_value)
-      if header_value =~ /\r\n/
+      header_value = header_value.to_s
+      if /[\r\n]/ =~ header_value
         raise InvalidHeader
       else
         header_value
Index: ruby2.1-2.1.5/test/webrick/test_httpresponse.rb
===================================================================
--- ruby2.1-2.1.5.orig/test/webrick/test_httpresponse.rb	2019-11-21 18:07:35.292175854 +0100
+++ ruby2.1-2.1.5/test/webrick/test_httpresponse.rb	2019-11-21 18:10:10.147837880 +0100
@@ -28,7 +28,7 @@
       @res.keep_alive  = true
     end
 
-    def test_prevent_response_splitting_headers
+    def test_prevent_response_splitting_headers_crlf
       res['X-header'] = "malicious\r\nCookie: hack"
       io = StringIO.new
       res.send_response io
@@ -38,11 +38,53 @@
       refute_match 'hack', io.string
     end
 
-    def test_prevent_response_splitting_cookie_headers
+    def test_prevent_response_splitting_cookie_headers_crlf
       user_input = "malicious\r\nCookie: hack"
       res.cookies << WEBrick::Cookie.new('author', user_input)
       io = StringIO.new
       res.send_response io
+      io.rewind
+      res = Net::HTTPResponse.read_new(Net::BufferedIO.new(io))
+      assert_equal '500', res.code
+      refute_match 'hack', io.string
+    end
+
+    def test_prevent_response_splitting_headers_cr
+      res['X-header'] = "malicious\rCookie: hack"
+      io = StringIO.new
+      res.send_response io
+      io.rewind
+      res = Net::HTTPResponse.read_new(Net::BufferedIO.new(io))
+      assert_equal '500', res.code
+      refute_match 'hack', io.string
+    end
+
+    def test_prevent_response_splitting_cookie_headers_cr
+      user_input = "malicious\rCookie: hack"
+      res.cookies << WEBrick::Cookie.new('author', user_input)
+      io = StringIO.new
+      res.send_response io
+      io.rewind
+      res = Net::HTTPResponse.read_new(Net::BufferedIO.new(io))
+      assert_equal '500', res.code
+      refute_match 'hack', io.string
+    end
+
+    def test_prevent_response_splitting_headers_lf
+      res['X-header'] = "malicious\nCookie: hack"
+      io = StringIO.new
+      res.send_response io
+      io.rewind
+      res = Net::HTTPResponse.read_new(Net::BufferedIO.new(io))
+      assert_equal '500', res.code
+      refute_match 'hack', io.string
+    end
+
+    def test_prevent_response_splitting_cookie_headers_lf
+      user_input = "malicious\nCookie: hack"
+      res.cookies << WEBrick::Cookie.new('author', user_input)
+      io = StringIO.new
+      res.send_response io
       io.rewind
       res = Net::HTTPResponse.read_new(Net::BufferedIO.new(io))
       assert_equal '500', res.code
