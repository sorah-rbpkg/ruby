// -*- c -*-
// DO NOT MODIFY THIS FILE DIRECTLY.
// auto-generated file
//   by ./tool/mk_builtin_loader.rb
//   with timev.rb
#include "internal/compilers.h"     /* for MAYBE_UNUSED */
#include "internal/warnings.h"      /* for COMPILER_WARNING_PUSH */
#include "ruby/ruby.h"              /* for VALUE */
#include "builtin.h"                /* for RB_BUILTIN_FUNCTION */
struct rb_execution_context_struct; /* in vm_core.h */

static void
mjit_compile_invokebuiltin_for_time_s_at1(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 1);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIuVALUE"; /* == time_s_at1 */\n", (VALUE)time_s_at1);
    fprintf(f, "    val = f(ec, self, argv[0]);\n");
}

static void
mjit_compile_invokebuiltin_for_time_s_at(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE, VALUE, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 4);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIuVALUE"; /* == time_s_at */\n", (VALUE)time_s_at);
    fprintf(f, "    val = f(ec, self, argv[0], argv[1], argv[2], argv[3]);\n");
}

static void
mjit_compile_invokebuiltin_for_time_init_now(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 1);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIuVALUE"; /* == time_init_now */\n", (VALUE)time_init_now);
    fprintf(f, "    val = f(ec, self, argv[0]);\n");
}

static void
mjit_compile_invokebuiltin_for_time_init_args(FILE *f, long index, unsigned stack_size, bool inlinable_p)
{
    fprintf(f, "    VALUE self = GET_SELF();\n");
    fprintf(f, "    typedef VALUE (*func)(rb_execution_context_t *, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE);\n");
    if (index == -1) {
        fprintf(f, "    const VALUE *argv = &stack[%d];\n", stack_size - 7);
    }
    else {
        fprintf(f, "    const unsigned int lnum = GET_ISEQ()->body->local_table_size;\n");
        fprintf(f, "    const VALUE *argv = GET_EP() - lnum - VM_ENV_DATA_SIZE + 1 + %ld;\n", index);
    }
    fprintf(f, "    func f = (func)%"PRIuVALUE"; /* == time_init_args */\n", (VALUE)time_init_args);
    fprintf(f, "    val = f(ec, self, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5], argv[6]);\n");
}

void Init_builtin_timev(void)
{
  // table definition
  static const struct rb_builtin_function timev_table[] = {
    RB_BUILTIN_FUNCTION(0, time_s_at1, time_s_at1, 1, mjit_compile_invokebuiltin_for_time_s_at1),
    RB_BUILTIN_FUNCTION(1, time_s_at, time_s_at, 4, mjit_compile_invokebuiltin_for_time_s_at),
    RB_BUILTIN_FUNCTION(2, time_init_now, time_init_now, 1, mjit_compile_invokebuiltin_for_time_init_now),
    RB_BUILTIN_FUNCTION(3, time_init_args, time_init_args, 7, mjit_compile_invokebuiltin_for_time_init_args),
    RB_BUILTIN_FUNCTION(-1, NULL, NULL, 0, 0),
  };

  // arity_check
COMPILER_WARNING_PUSH
#if GCC_VERSION_SINCE(5, 1, 0) || defined __clang__
COMPILER_WARNING_ERROR(-Wincompatible-pointer-types)
#endif
  if (0) rb_builtin_function_check_arity1(time_s_at1);
  if (0) rb_builtin_function_check_arity4(time_s_at);
  if (0) rb_builtin_function_check_arity1(time_init_now);
  if (0) rb_builtin_function_check_arity7(time_init_args);
COMPILER_WARNING_POP

  // load
  rb_load_with_builtin_functions("timev", timev_table);
}
