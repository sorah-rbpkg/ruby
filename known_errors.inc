/** -*-c-*-
 * DO NOT EDIT
 * This file is automatically generated by tool/generic_erb.rb from
 * template/known_errors.inc.tmpl and defs/known_errors.def.
 */

#if 0
        /* "Argument list too long" error */
        rb_define_const(rb_mErrno, "E2BIG", eE2BIG);
#endif
#ifdef E2BIG
        defined_error("E2BIG", E2BIG)
#else
        undefined_error("E2BIG")
#endif
#if 0
        /* "Permission denied" error */
        rb_define_const(rb_mErrno, "EACCES", eEACCES);
#endif
#ifdef EACCES
        defined_error("EACCES", EACCES)
#else
        undefined_error("EACCES")
#endif
#if 0
        /* "Address already in use" error */
        rb_define_const(rb_mErrno, "EADDRINUSE", eEADDRINUSE);
#endif
#ifdef EADDRINUSE
        defined_error("EADDRINUSE", EADDRINUSE)
#else
        undefined_error("EADDRINUSE")
#endif
#if 0
        /* "Address not available" error */
        rb_define_const(rb_mErrno, "EADDRNOTAVAIL", eEADDRNOTAVAIL);
#endif
#ifdef EADDRNOTAVAIL
        defined_error("EADDRNOTAVAIL", EADDRNOTAVAIL)
#else
        undefined_error("EADDRNOTAVAIL")
#endif
#if 0
        /* "Advertise error" error */
        rb_define_const(rb_mErrno, "EADV", eEADV);
#endif
#ifdef EADV
        defined_error("EADV", EADV)
#else
        undefined_error("EADV")
#endif
#if 0
        /* "Address family not supported" error */
        rb_define_const(rb_mErrno, "EAFNOSUPPORT", eEAFNOSUPPORT);
#endif
#ifdef EAFNOSUPPORT
        defined_error("EAFNOSUPPORT", EAFNOSUPPORT)
#else
        undefined_error("EAFNOSUPPORT")
#endif
#if 0
        /* "Resource temporarily unavailable, try again (may be the same value as EWOULDBLOCK)" error */
        rb_define_const(rb_mErrno, "EAGAIN", eEAGAIN);
#endif
#ifdef EAGAIN
        defined_error("EAGAIN", EAGAIN)
#else
        undefined_error("EAGAIN")
#endif
#if 0
        /* "Connection already in progress" error */
        rb_define_const(rb_mErrno, "EALREADY", eEALREADY);
#endif
#ifdef EALREADY
        defined_error("EALREADY", EALREADY)
#else
        undefined_error("EALREADY")
#endif
#if 0
        /* "Authentication error" error */
        rb_define_const(rb_mErrno, "EAUTH", eEAUTH);
#endif
#ifdef EAUTH
        defined_error("EAUTH", EAUTH)
#else
        undefined_error("EAUTH")
#endif
#if 0
        /* "Bad CPU type in executable" error */
        rb_define_const(rb_mErrno, "EBADARCH", eEBADARCH);
#endif
#ifdef EBADARCH
        defined_error("EBADARCH", EBADARCH)
#else
        undefined_error("EBADARCH")
#endif
#if 0
        /* "Bad exchange" error */
        rb_define_const(rb_mErrno, "EBADE", eEBADE);
#endif
#ifdef EBADE
        defined_error("EBADE", EBADE)
#else
        undefined_error("EBADE")
#endif
#if 0
        /* "Bad executable" error */
        rb_define_const(rb_mErrno, "EBADEXEC", eEBADEXEC);
#endif
#ifdef EBADEXEC
        defined_error("EBADEXEC", EBADEXEC)
#else
        undefined_error("EBADEXEC")
#endif
#if 0
        /* "Bad file descriptor" error */
        rb_define_const(rb_mErrno, "EBADF", eEBADF);
#endif
#ifdef EBADF
        defined_error("EBADF", EBADF)
#else
        undefined_error("EBADF")
#endif
#if 0
        /* "File descriptor in bad state" error */
        rb_define_const(rb_mErrno, "EBADFD", eEBADFD);
#endif
#ifdef EBADFD
        defined_error("EBADFD", EBADFD)
#else
        undefined_error("EBADFD")
#endif
#if 0
        /* "Malformed Macho file" error */
        rb_define_const(rb_mErrno, "EBADMACHO", eEBADMACHO);
#endif
#ifdef EBADMACHO
        defined_error("EBADMACHO", EBADMACHO)
#else
        undefined_error("EBADMACHO")
#endif
#if 0
        /* "Bad message" error */
        rb_define_const(rb_mErrno, "EBADMSG", eEBADMSG);
#endif
#ifdef EBADMSG
        defined_error("EBADMSG", EBADMSG)
#else
        undefined_error("EBADMSG")
#endif
#if 0
        /* "Invalid request descriptor" error */
        rb_define_const(rb_mErrno, "EBADR", eEBADR);
#endif
#ifdef EBADR
        defined_error("EBADR", EBADR)
#else
        undefined_error("EBADR")
#endif
#if 0
        /* "RPC struct is bad" error */
        rb_define_const(rb_mErrno, "EBADRPC", eEBADRPC);
#endif
#ifdef EBADRPC
        defined_error("EBADRPC", EBADRPC)
#else
        undefined_error("EBADRPC")
#endif
#if 0
        /* "Invalid request code" error */
        rb_define_const(rb_mErrno, "EBADRQC", eEBADRQC);
#endif
#ifdef EBADRQC
        defined_error("EBADRQC", EBADRQC)
#else
        undefined_error("EBADRQC")
#endif
#if 0
        /* "Invalid slot" error */
        rb_define_const(rb_mErrno, "EBADSLT", eEBADSLT);
#endif
#ifdef EBADSLT
        defined_error("EBADSLT", EBADSLT)
#else
        undefined_error("EBADSLT")
#endif
#if 0
        /* "Bad font file format" error */
        rb_define_const(rb_mErrno, "EBFONT", eEBFONT);
#endif
#ifdef EBFONT
        defined_error("EBFONT", EBFONT)
#else
        undefined_error("EBFONT")
#endif
#if 0
        /* "Device or resource busy" error */
        rb_define_const(rb_mErrno, "EBUSY", eEBUSY);
#endif
#ifdef EBUSY
        defined_error("EBUSY", EBUSY)
#else
        undefined_error("EBUSY")
#endif
#if 0
        /* "Operation canceled" error */
        rb_define_const(rb_mErrno, "ECANCELED", eECANCELED);
#endif
#ifdef ECANCELED
        defined_error("ECANCELED", ECANCELED)
#else
        undefined_error("ECANCELED")
#endif
#if 0
        /* "Not permitted in capability mode" error */
        rb_define_const(rb_mErrno, "ECAPMODE", eECAPMODE);
#endif
#ifdef ECAPMODE
        defined_error("ECAPMODE", ECAPMODE)
#else
        undefined_error("ECAPMODE")
#endif
#if 0
        /* "No child processes" error */
        rb_define_const(rb_mErrno, "ECHILD", eECHILD);
#endif
#ifdef ECHILD
        defined_error("ECHILD", ECHILD)
#else
        undefined_error("ECHILD")
#endif
#if 0
        /* "Channel number out of range" error */
        rb_define_const(rb_mErrno, "ECHRNG", eECHRNG);
#endif
#ifdef ECHRNG
        defined_error("ECHRNG", ECHRNG)
#else
        undefined_error("ECHRNG")
#endif
#if 0
        /* "Communication error on send" error */
        rb_define_const(rb_mErrno, "ECOMM", eECOMM);
#endif
#ifdef ECOMM
        defined_error("ECOMM", ECOMM)
#else
        undefined_error("ECOMM")
#endif
#if 0
        /* "Connection aborted" error */
        rb_define_const(rb_mErrno, "ECONNABORTED", eECONNABORTED);
#endif
#ifdef ECONNABORTED
        defined_error("ECONNABORTED", ECONNABORTED)
#else
        undefined_error("ECONNABORTED")
#endif
#if 0
        /* "Connection refused" error */
        rb_define_const(rb_mErrno, "ECONNREFUSED", eECONNREFUSED);
#endif
#ifdef ECONNREFUSED
        defined_error("ECONNREFUSED", ECONNREFUSED)
#else
        undefined_error("ECONNREFUSED")
#endif
#if 0
        /* "Connection reset" error */
        rb_define_const(rb_mErrno, "ECONNRESET", eECONNRESET);
#endif
#ifdef ECONNRESET
        defined_error("ECONNRESET", ECONNRESET)
#else
        undefined_error("ECONNRESET")
#endif
#if 0
        /* "Resource deadlock avoided" error */
        rb_define_const(rb_mErrno, "EDEADLK", eEDEADLK);
#endif
#ifdef EDEADLK
        defined_error("EDEADLK", EDEADLK)
#else
        undefined_error("EDEADLK")
#endif
#if 0
        /* "File locking deadlock error" error */
        rb_define_const(rb_mErrno, "EDEADLOCK", eEDEADLOCK);
#endif
#ifdef EDEADLOCK
        defined_error("EDEADLOCK", EDEADLOCK)
#else
        undefined_error("EDEADLOCK")
#endif
#if 0
        /* "Destination address required" error */
        rb_define_const(rb_mErrno, "EDESTADDRREQ", eEDESTADDRREQ);
#endif
#ifdef EDESTADDRREQ
        defined_error("EDESTADDRREQ", EDESTADDRREQ)
#else
        undefined_error("EDESTADDRREQ")
#endif
#if 0
        /* "Device error; e.g., printer paper out" error */
        rb_define_const(rb_mErrno, "EDEVERR", eEDEVERR);
#endif
#ifdef EDEVERR
        defined_error("EDEVERR", EDEVERR)
#else
        undefined_error("EDEVERR")
#endif
#if 0
        /* "Mathematics argument out of domain of function" error */
        rb_define_const(rb_mErrno, "EDOM", eEDOM);
#endif
#ifdef EDOM
        defined_error("EDOM", EDOM)
#else
        undefined_error("EDOM")
#endif
#if 0
        /* "Improper function use" error */
        rb_define_const(rb_mErrno, "EDOOFUS", eEDOOFUS);
#endif
#ifdef EDOOFUS
        defined_error("EDOOFUS", EDOOFUS)
#else
        undefined_error("EDOOFUS")
#endif
#if 0
        /* "RFS specific error" error */
        rb_define_const(rb_mErrno, "EDOTDOT", eEDOTDOT);
#endif
#ifdef EDOTDOT
        defined_error("EDOTDOT", EDOTDOT)
#else
        undefined_error("EDOTDOT")
#endif
#if 0
        /* "Disk quota exceeded" error */
        rb_define_const(rb_mErrno, "EDQUOT", eEDQUOT);
#endif
#ifdef EDQUOT
        defined_error("EDQUOT", EDQUOT)
#else
        undefined_error("EDQUOT")
#endif
#if 0
        /* "File exists" error */
        rb_define_const(rb_mErrno, "EEXIST", eEEXIST);
#endif
#ifdef EEXIST
        defined_error("EEXIST", EEXIST)
#else
        undefined_error("EEXIST")
#endif
#if 0
        /* "Bad address" error */
        rb_define_const(rb_mErrno, "EFAULT", eEFAULT);
#endif
#ifdef EFAULT
        defined_error("EFAULT", EFAULT)
#else
        undefined_error("EFAULT")
#endif
#if 0
        /* "File too large" error */
        rb_define_const(rb_mErrno, "EFBIG", eEFBIG);
#endif
#ifdef EFBIG
        defined_error("EFBIG", EFBIG)
#else
        undefined_error("EFBIG")
#endif
#if 0
        /* "Invalid file type or format" error */
        rb_define_const(rb_mErrno, "EFTYPE", eEFTYPE);
#endif
#ifdef EFTYPE
        defined_error("EFTYPE", EFTYPE)
#else
        undefined_error("EFTYPE")
#endif
#if 0
        /* "Host is down" error */
        rb_define_const(rb_mErrno, "EHOSTDOWN", eEHOSTDOWN);
#endif
#ifdef EHOSTDOWN
        defined_error("EHOSTDOWN", EHOSTDOWN)
#else
        undefined_error("EHOSTDOWN")
#endif
#if 0
        /* "Host is unreachable" error */
        rb_define_const(rb_mErrno, "EHOSTUNREACH", eEHOSTUNREACH);
#endif
#ifdef EHOSTUNREACH
        defined_error("EHOSTUNREACH", EHOSTUNREACH)
#else
        undefined_error("EHOSTUNREACH")
#endif
#if 0
        /* "Memory page has hardware error" error */
        rb_define_const(rb_mErrno, "EHWPOISON", eEHWPOISON);
#endif
#ifdef EHWPOISON
        defined_error("EHWPOISON", EHWPOISON)
#else
        undefined_error("EHWPOISON")
#endif
#if 0
        /* "Identifier removed" error */
        rb_define_const(rb_mErrno, "EIDRM", eEIDRM);
#endif
#ifdef EIDRM
        defined_error("EIDRM", EIDRM)
#else
        undefined_error("EIDRM")
#endif
#if 0
        /* "Invalid or incomplete multibyte or wide character" error */
        rb_define_const(rb_mErrno, "EILSEQ", eEILSEQ);
#endif
#ifdef EILSEQ
        defined_error("EILSEQ", EILSEQ)
#else
        undefined_error("EILSEQ")
#endif
#if 0
        /* "Operation in progress" error */
        rb_define_const(rb_mErrno, "EINPROGRESS", eEINPROGRESS);
#endif
#ifdef EINPROGRESS
        defined_error("EINPROGRESS", EINPROGRESS)
#else
        undefined_error("EINPROGRESS")
#endif
#if 0
        /* "Interrupted function call" error */
        rb_define_const(rb_mErrno, "EINTR", eEINTR);
#endif
#ifdef EINTR
        defined_error("EINTR", EINTR)
#else
        undefined_error("EINTR")
#endif
#if 0
        /* "Invalid argument" error */
        rb_define_const(rb_mErrno, "EINVAL", eEINVAL);
#endif
#ifdef EINVAL
        defined_error("EINVAL", EINVAL)
#else
        undefined_error("EINVAL")
#endif
#if 0
        /* "Input/output error" error */
        rb_define_const(rb_mErrno, "EIO", eEIO);
#endif
#ifdef EIO
        defined_error("EIO", EIO)
#else
        undefined_error("EIO")
#endif
#if 0
        /* "IPsec processing failure" error */
        rb_define_const(rb_mErrno, "EIPSEC", eEIPSEC);
#endif
#ifdef EIPSEC
        defined_error("EIPSEC", EIPSEC)
#else
        undefined_error("EIPSEC")
#endif
#if 0
        /* "Socket is connected" error */
        rb_define_const(rb_mErrno, "EISCONN", eEISCONN);
#endif
#ifdef EISCONN
        defined_error("EISCONN", EISCONN)
#else
        undefined_error("EISCONN")
#endif
#if 0
        /* "Is a directory" error */
        rb_define_const(rb_mErrno, "EISDIR", eEISDIR);
#endif
#ifdef EISDIR
        defined_error("EISDIR", EISDIR)
#else
        undefined_error("EISDIR")
#endif
#if 0
        /* "Is a named file type" error */
        rb_define_const(rb_mErrno, "EISNAM", eEISNAM);
#endif
#ifdef EISNAM
        defined_error("EISNAM", EISNAM)
#else
        undefined_error("EISNAM")
#endif
#if 0
        /* "Key has expired" error */
        rb_define_const(rb_mErrno, "EKEYEXPIRED", eEKEYEXPIRED);
#endif
#ifdef EKEYEXPIRED
        defined_error("EKEYEXPIRED", EKEYEXPIRED)
#else
        undefined_error("EKEYEXPIRED")
#endif
#if 0
        /* "Key was rejected by service" error */
        rb_define_const(rb_mErrno, "EKEYREJECTED", eEKEYREJECTED);
#endif
#ifdef EKEYREJECTED
        defined_error("EKEYREJECTED", EKEYREJECTED)
#else
        undefined_error("EKEYREJECTED")
#endif
#if 0
        /* "Key has been revoked" error */
        rb_define_const(rb_mErrno, "EKEYREVOKED", eEKEYREVOKED);
#endif
#ifdef EKEYREVOKED
        defined_error("EKEYREVOKED", EKEYREVOKED)
#else
        undefined_error("EKEYREVOKED")
#endif
#if 0
        /* "Level 2 halted" error */
        rb_define_const(rb_mErrno, "EL2HLT", eEL2HLT);
#endif
#ifdef EL2HLT
        defined_error("EL2HLT", EL2HLT)
#else
        undefined_error("EL2HLT")
#endif
#if 0
        /* "Level 2 not synchronized" error */
        rb_define_const(rb_mErrno, "EL2NSYNC", eEL2NSYNC);
#endif
#ifdef EL2NSYNC
        defined_error("EL2NSYNC", EL2NSYNC)
#else
        undefined_error("EL2NSYNC")
#endif
#if 0
        /* "Level 3 halted" error */
        rb_define_const(rb_mErrno, "EL3HLT", eEL3HLT);
#endif
#ifdef EL3HLT
        defined_error("EL3HLT", EL3HLT)
#else
        undefined_error("EL3HLT")
#endif
#if 0
        /* "Level 3 reset" error */
        rb_define_const(rb_mErrno, "EL3RST", eEL3RST);
#endif
#ifdef EL3RST
        defined_error("EL3RST", EL3RST)
#else
        undefined_error("EL3RST")
#endif
#if 0
        /* "Cannot access a needed shared library" error */
        rb_define_const(rb_mErrno, "ELIBACC", eELIBACC);
#endif
#ifdef ELIBACC
        defined_error("ELIBACC", ELIBACC)
#else
        undefined_error("ELIBACC")
#endif
#if 0
        /* "Accessing a corrupted shared library" error */
        rb_define_const(rb_mErrno, "ELIBBAD", eELIBBAD);
#endif
#ifdef ELIBBAD
        defined_error("ELIBBAD", ELIBBAD)
#else
        undefined_error("ELIBBAD")
#endif
#if 0
        /* "Cannot exec a shared library directly" error */
        rb_define_const(rb_mErrno, "ELIBEXEC", eELIBEXEC);
#endif
#ifdef ELIBEXEC
        defined_error("ELIBEXEC", ELIBEXEC)
#else
        undefined_error("ELIBEXEC")
#endif
#if 0
        /* "Attempting to link in too many shared libraries" error */
        rb_define_const(rb_mErrno, "ELIBMAX", eELIBMAX);
#endif
#ifdef ELIBMAX
        defined_error("ELIBMAX", ELIBMAX)
#else
        undefined_error("ELIBMAX")
#endif
#if 0
        /* ".lib section in a.out corrupted" error */
        rb_define_const(rb_mErrno, "ELIBSCN", eELIBSCN);
#endif
#ifdef ELIBSCN
        defined_error("ELIBSCN", ELIBSCN)
#else
        undefined_error("ELIBSCN")
#endif
#if 0
        /* "Link number out of range" error */
        rb_define_const(rb_mErrno, "ELNRNG", eELNRNG);
#endif
#ifdef ELNRNG
        defined_error("ELNRNG", ELNRNG)
#else
        undefined_error("ELNRNG")
#endif
#if 0
        /* "Too many levels of symbolic links" error */
        rb_define_const(rb_mErrno, "ELOOP", eELOOP);
#endif
#ifdef ELOOP
        defined_error("ELOOP", ELOOP)
#else
        undefined_error("ELOOP")
#endif
#if 0
        /* "Wrong medium type" error */
        rb_define_const(rb_mErrno, "EMEDIUMTYPE", eEMEDIUMTYPE);
#endif
#ifdef EMEDIUMTYPE
        defined_error("EMEDIUMTYPE", EMEDIUMTYPE)
#else
        undefined_error("EMEDIUMTYPE")
#endif
#if 0
        /* "Too many open files" error */
        rb_define_const(rb_mErrno, "EMFILE", eEMFILE);
#endif
#ifdef EMFILE
        defined_error("EMFILE", EMFILE)
#else
        undefined_error("EMFILE")
#endif
#if 0
        /* "Too many links" error */
        rb_define_const(rb_mErrno, "EMLINK", eEMLINK);
#endif
#ifdef EMLINK
        defined_error("EMLINK", EMLINK)
#else
        undefined_error("EMLINK")
#endif
#if 0
        /* "Message too long" error */
        rb_define_const(rb_mErrno, "EMSGSIZE", eEMSGSIZE);
#endif
#ifdef EMSGSIZE
        defined_error("EMSGSIZE", EMSGSIZE)
#else
        undefined_error("EMSGSIZE")
#endif
#if 0
        /* "Multihop attempted" error */
        rb_define_const(rb_mErrno, "EMULTIHOP", eEMULTIHOP);
#endif
#ifdef EMULTIHOP
        defined_error("EMULTIHOP", EMULTIHOP)
#else
        undefined_error("EMULTIHOP")
#endif
#if 0
        /* "Filename too long" error */
        rb_define_const(rb_mErrno, "ENAMETOOLONG", eENAMETOOLONG);
#endif
#ifdef ENAMETOOLONG
        defined_error("ENAMETOOLONG", ENAMETOOLONG)
#else
        undefined_error("ENAMETOOLONG")
#endif
#if 0
        /* "No XENIX semaphores available" error */
        rb_define_const(rb_mErrno, "ENAVAIL", eENAVAIL);
#endif
#ifdef ENAVAIL
        defined_error("ENAVAIL", ENAVAIL)
#else
        undefined_error("ENAVAIL")
#endif
#if 0
        /* "Need authenticator" error */
        rb_define_const(rb_mErrno, "ENEEDAUTH", eENEEDAUTH);
#endif
#ifdef ENEEDAUTH
        defined_error("ENEEDAUTH", ENEEDAUTH)
#else
        undefined_error("ENEEDAUTH")
#endif
#if 0
        /* "Network is down" error */
        rb_define_const(rb_mErrno, "ENETDOWN", eENETDOWN);
#endif
#ifdef ENETDOWN
        defined_error("ENETDOWN", ENETDOWN)
#else
        undefined_error("ENETDOWN")
#endif
#if 0
        /* "Connection aborted by network" error */
        rb_define_const(rb_mErrno, "ENETRESET", eENETRESET);
#endif
#ifdef ENETRESET
        defined_error("ENETRESET", ENETRESET)
#else
        undefined_error("ENETRESET")
#endif
#if 0
        /* "Network unreachable" error */
        rb_define_const(rb_mErrno, "ENETUNREACH", eENETUNREACH);
#endif
#ifdef ENETUNREACH
        defined_error("ENETUNREACH", ENETUNREACH)
#else
        undefined_error("ENETUNREACH")
#endif
#if 0
        /* "Too many open files in system" error */
        rb_define_const(rb_mErrno, "ENFILE", eENFILE);
#endif
#ifdef ENFILE
        defined_error("ENFILE", ENFILE)
#else
        undefined_error("ENFILE")
#endif
#if 0
        /* "No anode" error */
        rb_define_const(rb_mErrno, "ENOANO", eENOANO);
#endif
#ifdef ENOANO
        defined_error("ENOANO", ENOANO)
#else
        undefined_error("ENOANO")
#endif
#if 0
        /* "Attribute not found" error */
        rb_define_const(rb_mErrno, "ENOATTR", eENOATTR);
#endif
#ifdef ENOATTR
        defined_error("ENOATTR", ENOATTR)
#else
        undefined_error("ENOATTR")
#endif
#if 0
        /* "No buffer space available" error */
        rb_define_const(rb_mErrno, "ENOBUFS", eENOBUFS);
#endif
#ifdef ENOBUFS
        defined_error("ENOBUFS", ENOBUFS)
#else
        undefined_error("ENOBUFS")
#endif
#if 0
        /* "No CSI structure available" error */
        rb_define_const(rb_mErrno, "ENOCSI", eENOCSI);
#endif
#ifdef ENOCSI
        defined_error("ENOCSI", ENOCSI)
#else
        undefined_error("ENOCSI")
#endif
#if 0
        /* "No data available" error */
        rb_define_const(rb_mErrno, "ENODATA", eENODATA);
#endif
#ifdef ENODATA
        defined_error("ENODATA", ENODATA)
#else
        undefined_error("ENODATA")
#endif
#if 0
        /* "No such device" error */
        rb_define_const(rb_mErrno, "ENODEV", eENODEV);
#endif
#ifdef ENODEV
        defined_error("ENODEV", ENODEV)
#else
        undefined_error("ENODEV")
#endif
#if 0
        /* "No such file or directory" error */
        rb_define_const(rb_mErrno, "ENOENT", eENOENT);
#endif
#ifdef ENOENT
        defined_error("ENOENT", ENOENT)
#else
        undefined_error("ENOENT")
#endif
#if 0
        /* "Exec format error" error */
        rb_define_const(rb_mErrno, "ENOEXEC", eENOEXEC);
#endif
#ifdef ENOEXEC
        defined_error("ENOEXEC", ENOEXEC)
#else
        undefined_error("ENOEXEC")
#endif
#if 0
        /* "Required key not available" error */
        rb_define_const(rb_mErrno, "ENOKEY", eENOKEY);
#endif
#ifdef ENOKEY
        defined_error("ENOKEY", ENOKEY)
#else
        undefined_error("ENOKEY")
#endif
#if 0
        /* "No locks available" error */
        rb_define_const(rb_mErrno, "ENOLCK", eENOLCK);
#endif
#ifdef ENOLCK
        defined_error("ENOLCK", ENOLCK)
#else
        undefined_error("ENOLCK")
#endif
#if 0
        /* "Link has been severed" error */
        rb_define_const(rb_mErrno, "ENOLINK", eENOLINK);
#endif
#ifdef ENOLINK
        defined_error("ENOLINK", ENOLINK)
#else
        undefined_error("ENOLINK")
#endif
#if 0
        /* "No medium found" error */
        rb_define_const(rb_mErrno, "ENOMEDIUM", eENOMEDIUM);
#endif
#ifdef ENOMEDIUM
        defined_error("ENOMEDIUM", ENOMEDIUM)
#else
        undefined_error("ENOMEDIUM")
#endif
#if 0
        /* "Not enough space/cannot allocate memory" error */
        rb_define_const(rb_mErrno, "ENOMEM", eENOMEM);
#endif
#ifdef ENOMEM
        defined_error("ENOMEM", ENOMEM)
#else
        undefined_error("ENOMEM")
#endif
#if 0
        /* "No message of the desired type" error */
        rb_define_const(rb_mErrno, "ENOMSG", eENOMSG);
#endif
#ifdef ENOMSG
        defined_error("ENOMSG", ENOMSG)
#else
        undefined_error("ENOMSG")
#endif
#if 0
        /* "Machine is not on the network" error */
        rb_define_const(rb_mErrno, "ENONET", eENONET);
#endif
#ifdef ENONET
        defined_error("ENONET", ENONET)
#else
        undefined_error("ENONET")
#endif
#if 0
        /* "Package not installed" error */
        rb_define_const(rb_mErrno, "ENOPKG", eENOPKG);
#endif
#ifdef ENOPKG
        defined_error("ENOPKG", ENOPKG)
#else
        undefined_error("ENOPKG")
#endif
#if 0
        /* "No such policy" error */
        rb_define_const(rb_mErrno, "ENOPOLICY", eENOPOLICY);
#endif
#ifdef ENOPOLICY
        defined_error("ENOPOLICY", ENOPOLICY)
#else
        undefined_error("ENOPOLICY")
#endif
#if 0
        /* "Protocol not available" error */
        rb_define_const(rb_mErrno, "ENOPROTOOPT", eENOPROTOOPT);
#endif
#ifdef ENOPROTOOPT
        defined_error("ENOPROTOOPT", ENOPROTOOPT)
#else
        undefined_error("ENOPROTOOPT")
#endif
#if 0
        /* "No space left on device" error */
        rb_define_const(rb_mErrno, "ENOSPC", eENOSPC);
#endif
#ifdef ENOSPC
        defined_error("ENOSPC", ENOSPC)
#else
        undefined_error("ENOSPC")
#endif
#if 0
        /* "No STREAM resources" error */
        rb_define_const(rb_mErrno, "ENOSR", eENOSR);
#endif
#ifdef ENOSR
        defined_error("ENOSR", ENOSR)
#else
        undefined_error("ENOSR")
#endif
#if 0
        /* "Not a STREAM" error */
        rb_define_const(rb_mErrno, "ENOSTR", eENOSTR);
#endif
#ifdef ENOSTR
        defined_error("ENOSTR", ENOSTR)
#else
        undefined_error("ENOSTR")
#endif
#if 0
        /* "Functionality not implemented" error */
        rb_define_const(rb_mErrno, "ENOSYS", eENOSYS);
#endif
#ifdef ENOSYS
        defined_error("ENOSYS", ENOSYS)
#else
        undefined_error("ENOSYS")
#endif
#if 0
        /* "Block device required" error */
        rb_define_const(rb_mErrno, "ENOTBLK", eENOTBLK);
#endif
#ifdef ENOTBLK
        defined_error("ENOTBLK", ENOTBLK)
#else
        undefined_error("ENOTBLK")
#endif
#if 0
        /* "Capabilities insufficient" error */
        rb_define_const(rb_mErrno, "ENOTCAPABLE", eENOTCAPABLE);
#endif
#ifdef ENOTCAPABLE
        defined_error("ENOTCAPABLE", ENOTCAPABLE)
#else
        undefined_error("ENOTCAPABLE")
#endif
#if 0
        /* "The socket is not connected" error */
        rb_define_const(rb_mErrno, "ENOTCONN", eENOTCONN);
#endif
#ifdef ENOTCONN
        defined_error("ENOTCONN", ENOTCONN)
#else
        undefined_error("ENOTCONN")
#endif
#if 0
        /* "Not a directory" error */
        rb_define_const(rb_mErrno, "ENOTDIR", eENOTDIR);
#endif
#ifdef ENOTDIR
        defined_error("ENOTDIR", ENOTDIR)
#else
        undefined_error("ENOTDIR")
#endif
#if 0
        /* "Directory not empty" error */
        rb_define_const(rb_mErrno, "ENOTEMPTY", eENOTEMPTY);
#endif
#ifdef ENOTEMPTY
        defined_error("ENOTEMPTY", ENOTEMPTY)
#else
        undefined_error("ENOTEMPTY")
#endif
#if 0
        /* "Not a XENIX named type file" error */
        rb_define_const(rb_mErrno, "ENOTNAM", eENOTNAM);
#endif
#ifdef ENOTNAM
        defined_error("ENOTNAM", ENOTNAM)
#else
        undefined_error("ENOTNAM")
#endif
#if 0
        /* "State not recoverable" error */
        rb_define_const(rb_mErrno, "ENOTRECOVERABLE", eENOTRECOVERABLE);
#endif
#ifdef ENOTRECOVERABLE
        defined_error("ENOTRECOVERABLE", ENOTRECOVERABLE)
#else
        undefined_error("ENOTRECOVERABLE")
#endif
#if 0
        /* "Not a socket" error */
        rb_define_const(rb_mErrno, "ENOTSOCK", eENOTSOCK);
#endif
#ifdef ENOTSOCK
        defined_error("ENOTSOCK", ENOTSOCK)
#else
        undefined_error("ENOTSOCK")
#endif
#if 0
        /* "Operation not supported" error */
        rb_define_const(rb_mErrno, "ENOTSUP", eENOTSUP);
#endif
#ifdef ENOTSUP
        defined_error("ENOTSUP", ENOTSUP)
#else
        undefined_error("ENOTSUP")
#endif
#if 0
        /* "Inappropriate I/O control operation" error */
        rb_define_const(rb_mErrno, "ENOTTY", eENOTTY);
#endif
#ifdef ENOTTY
        defined_error("ENOTTY", ENOTTY)
#else
        undefined_error("ENOTTY")
#endif
#if 0
        /* "Name not unique on network" error */
        rb_define_const(rb_mErrno, "ENOTUNIQ", eENOTUNIQ);
#endif
#ifdef ENOTUNIQ
        defined_error("ENOTUNIQ", ENOTUNIQ)
#else
        undefined_error("ENOTUNIQ")
#endif
#if 0
        /* "No such device or address" error */
        rb_define_const(rb_mErrno, "ENXIO", eENXIO);
#endif
#ifdef ENXIO
        defined_error("ENXIO", ENXIO)
#else
        undefined_error("ENXIO")
#endif
#if 0
        /* "Operation not supported on socket" error */
        rb_define_const(rb_mErrno, "EOPNOTSUPP", eEOPNOTSUPP);
#endif
#ifdef EOPNOTSUPP
        defined_error("EOPNOTSUPP", EOPNOTSUPP)
#else
        undefined_error("EOPNOTSUPP")
#endif
#if 0
        /* "Value too large to be stored in data type" error */
        rb_define_const(rb_mErrno, "EOVERFLOW", eEOVERFLOW);
#endif
#ifdef EOVERFLOW
        defined_error("EOVERFLOW", EOVERFLOW)
#else
        undefined_error("EOVERFLOW")
#endif
#if 0
        /* "Owner died" error */
        rb_define_const(rb_mErrno, "EOWNERDEAD", eEOWNERDEAD);
#endif
#ifdef EOWNERDEAD
        defined_error("EOWNERDEAD", EOWNERDEAD)
#else
        undefined_error("EOWNERDEAD")
#endif
#if 0
        /* "Operation not permitted" error */
        rb_define_const(rb_mErrno, "EPERM", eEPERM);
#endif
#ifdef EPERM
        defined_error("EPERM", EPERM)
#else
        undefined_error("EPERM")
#endif
#if 0
        /* "Protocol family not supported" error */
        rb_define_const(rb_mErrno, "EPFNOSUPPORT", eEPFNOSUPPORT);
#endif
#ifdef EPFNOSUPPORT
        defined_error("EPFNOSUPPORT", EPFNOSUPPORT)
#else
        undefined_error("EPFNOSUPPORT")
#endif
#if 0
        /* "Broken pipe" error */
        rb_define_const(rb_mErrno, "EPIPE", eEPIPE);
#endif
#ifdef EPIPE
        defined_error("EPIPE", EPIPE)
#else
        undefined_error("EPIPE")
#endif
#if 0
        /* "Too many processes" error */
        rb_define_const(rb_mErrno, "EPROCLIM", eEPROCLIM);
#endif
#ifdef EPROCLIM
        defined_error("EPROCLIM", EPROCLIM)
#else
        undefined_error("EPROCLIM")
#endif
#if 0
        /* "Bad procedure for program" error */
        rb_define_const(rb_mErrno, "EPROCUNAVAIL", eEPROCUNAVAIL);
#endif
#ifdef EPROCUNAVAIL
        defined_error("EPROCUNAVAIL", EPROCUNAVAIL)
#else
        undefined_error("EPROCUNAVAIL")
#endif
#if 0
        /* "Program version wrong" error */
        rb_define_const(rb_mErrno, "EPROGMISMATCH", eEPROGMISMATCH);
#endif
#ifdef EPROGMISMATCH
        defined_error("EPROGMISMATCH", EPROGMISMATCH)
#else
        undefined_error("EPROGMISMATCH")
#endif
#if 0
        /* "RPC program isn't available" error */
        rb_define_const(rb_mErrno, "EPROGUNAVAIL", eEPROGUNAVAIL);
#endif
#ifdef EPROGUNAVAIL
        defined_error("EPROGUNAVAIL", EPROGUNAVAIL)
#else
        undefined_error("EPROGUNAVAIL")
#endif
#if 0
        /* "Protocol error" error */
        rb_define_const(rb_mErrno, "EPROTO", eEPROTO);
#endif
#ifdef EPROTO
        defined_error("EPROTO", EPROTO)
#else
        undefined_error("EPROTO")
#endif
#if 0
        /* "Protocol not supported" error */
        rb_define_const(rb_mErrno, "EPROTONOSUPPORT", eEPROTONOSUPPORT);
#endif
#ifdef EPROTONOSUPPORT
        defined_error("EPROTONOSUPPORT", EPROTONOSUPPORT)
#else
        undefined_error("EPROTONOSUPPORT")
#endif
#if 0
        /* "Protocol wrong type for socket" error */
        rb_define_const(rb_mErrno, "EPROTOTYPE", eEPROTOTYPE);
#endif
#ifdef EPROTOTYPE
        defined_error("EPROTOTYPE", EPROTOTYPE)
#else
        undefined_error("EPROTOTYPE")
#endif
#if 0
        /* "Device power is off" error */
        rb_define_const(rb_mErrno, "EPWROFF", eEPWROFF);
#endif
#ifdef EPWROFF
        defined_error("EPWROFF", EPWROFF)
#else
        undefined_error("EPWROFF")
#endif
#if 0
        /* "Interface output queue is full" error */
        rb_define_const(rb_mErrno, "EQFULL", eEQFULL);
#endif
#ifdef EQFULL
        defined_error("EQFULL", EQFULL)
#else
        undefined_error("EQFULL")
#endif
#if 0
        /* "Result too large" error */
        rb_define_const(rb_mErrno, "ERANGE", eERANGE);
#endif
#ifdef ERANGE
        defined_error("ERANGE", ERANGE)
#else
        undefined_error("ERANGE")
#endif
#if 0
        /* "Remote address changed" error */
        rb_define_const(rb_mErrno, "EREMCHG", eEREMCHG);
#endif
#ifdef EREMCHG
        defined_error("EREMCHG", EREMCHG)
#else
        undefined_error("EREMCHG")
#endif
#if 0
        /* "Object is remote" error */
        rb_define_const(rb_mErrno, "EREMOTE", eEREMOTE);
#endif
#ifdef EREMOTE
        defined_error("EREMOTE", EREMOTE)
#else
        undefined_error("EREMOTE")
#endif
#if 0
        /* "Remote I/O error" error */
        rb_define_const(rb_mErrno, "EREMOTEIO", eEREMOTEIO);
#endif
#ifdef EREMOTEIO
        defined_error("EREMOTEIO", EREMOTEIO)
#else
        undefined_error("EREMOTEIO")
#endif
#if 0
        /* "Interrupted system call should be restarted" error */
        rb_define_const(rb_mErrno, "ERESTART", eERESTART);
#endif
#ifdef ERESTART
        defined_error("ERESTART", ERESTART)
#else
        undefined_error("ERESTART")
#endif
#if 0
        /* "Operation not possible due to RF-kill" error */
        rb_define_const(rb_mErrno, "ERFKILL", eERFKILL);
#endif
#ifdef ERFKILL
        defined_error("ERFKILL", ERFKILL)
#else
        undefined_error("ERFKILL")
#endif
#if 0
        /* "Read-only file system" error */
        rb_define_const(rb_mErrno, "EROFS", eEROFS);
#endif
#ifdef EROFS
        defined_error("EROFS", EROFS)
#else
        undefined_error("EROFS")
#endif
#if 0
        /* "RPC version wrong" error */
        rb_define_const(rb_mErrno, "ERPCMISMATCH", eERPCMISMATCH);
#endif
#ifdef ERPCMISMATCH
        defined_error("ERPCMISMATCH", ERPCMISMATCH)
#else
        undefined_error("ERPCMISMATCH")
#endif
#if 0
        /* "Shared library version mismatch" error */
        rb_define_const(rb_mErrno, "ESHLIBVERS", eESHLIBVERS);
#endif
#ifdef ESHLIBVERS
        defined_error("ESHLIBVERS", ESHLIBVERS)
#else
        undefined_error("ESHLIBVERS")
#endif
#if 0
        /* "Cannot send after transport endpoint shutdown" error */
        rb_define_const(rb_mErrno, "ESHUTDOWN", eESHUTDOWN);
#endif
#ifdef ESHUTDOWN
        defined_error("ESHUTDOWN", ESHUTDOWN)
#else
        undefined_error("ESHUTDOWN")
#endif
#if 0
        /* "Socket type not supported" error */
        rb_define_const(rb_mErrno, "ESOCKTNOSUPPORT", eESOCKTNOSUPPORT);
#endif
#ifdef ESOCKTNOSUPPORT
        defined_error("ESOCKTNOSUPPORT", ESOCKTNOSUPPORT)
#else
        undefined_error("ESOCKTNOSUPPORT")
#endif
#if 0
        /* "Illegal seek" error */
        rb_define_const(rb_mErrno, "ESPIPE", eESPIPE);
#endif
#ifdef ESPIPE
        defined_error("ESPIPE", ESPIPE)
#else
        undefined_error("ESPIPE")
#endif
#if 0
        /* "No such process" error */
        rb_define_const(rb_mErrno, "ESRCH", eESRCH);
#endif
#ifdef ESRCH
        defined_error("ESRCH", ESRCH)
#else
        undefined_error("ESRCH")
#endif
#if 0
        /* "Server mount error" error */
        rb_define_const(rb_mErrno, "ESRMNT", eESRMNT);
#endif
#ifdef ESRMNT
        defined_error("ESRMNT", ESRMNT)
#else
        undefined_error("ESRMNT")
#endif
#if 0
        /* "Stale file handle" error */
        rb_define_const(rb_mErrno, "ESTALE", eESTALE);
#endif
#ifdef ESTALE
        defined_error("ESTALE", ESTALE)
#else
        undefined_error("ESTALE")
#endif
#if 0
        /* "Streams pipe error" error */
        rb_define_const(rb_mErrno, "ESTRPIPE", eESTRPIPE);
#endif
#ifdef ESTRPIPE
        defined_error("ESTRPIPE", ESTRPIPE)
#else
        undefined_error("ESTRPIPE")
#endif
#if 0
        /* "Timer expired" error */
        rb_define_const(rb_mErrno, "ETIME", eETIME);
#endif
#ifdef ETIME
        defined_error("ETIME", ETIME)
#else
        undefined_error("ETIME")
#endif
#if 0
        /* "Connection timed out" error */
        rb_define_const(rb_mErrno, "ETIMEDOUT", eETIMEDOUT);
#endif
#ifdef ETIMEDOUT
        defined_error("ETIMEDOUT", ETIMEDOUT)
#else
        undefined_error("ETIMEDOUT")
#endif
#if 0
        /* "Too many references: cannot splice" error */
        rb_define_const(rb_mErrno, "ETOOMANYREFS", eETOOMANYREFS);
#endif
#ifdef ETOOMANYREFS
        defined_error("ETOOMANYREFS", ETOOMANYREFS)
#else
        undefined_error("ETOOMANYREFS")
#endif
#if 0
        /* "Text file busy" error */
        rb_define_const(rb_mErrno, "ETXTBSY", eETXTBSY);
#endif
#ifdef ETXTBSY
        defined_error("ETXTBSY", ETXTBSY)
#else
        undefined_error("ETXTBSY")
#endif
#if 0
        /* "Structure needs cleaning" error */
        rb_define_const(rb_mErrno, "EUCLEAN", eEUCLEAN);
#endif
#ifdef EUCLEAN
        defined_error("EUCLEAN", EUCLEAN)
#else
        undefined_error("EUCLEAN")
#endif
#if 0
        /* "Protocol driver not attached" error */
        rb_define_const(rb_mErrno, "EUNATCH", eEUNATCH);
#endif
#ifdef EUNATCH
        defined_error("EUNATCH", EUNATCH)
#else
        undefined_error("EUNATCH")
#endif
#if 0
        /* "Too many users" error */
        rb_define_const(rb_mErrno, "EUSERS", eEUSERS);
#endif
#ifdef EUSERS
        defined_error("EUSERS", EUSERS)
#else
        undefined_error("EUSERS")
#endif
#if 0
        /* "Operation would block" error */
        rb_define_const(rb_mErrno, "EWOULDBLOCK", eEWOULDBLOCK);
#endif
#ifdef EWOULDBLOCK
        defined_error("EWOULDBLOCK", EWOULDBLOCK)
#else
        undefined_error("EWOULDBLOCK")
#endif
#if 0
        /* "Invalid cross-device link" error */
        rb_define_const(rb_mErrno, "EXDEV", eEXDEV);
#endif
#ifdef EXDEV
        defined_error("EXDEV", EXDEV)
#else
        undefined_error("EXDEV")
#endif
#if 0
        /* "Exchange full" error */
        rb_define_const(rb_mErrno, "EXFULL", eEXFULL);
#endif
#ifdef EXFULL
        defined_error("EXFULL", EXFULL)
#else
        undefined_error("EXFULL")
#endif
#if 0
        /* "Largest errno value" error */
        rb_define_const(rb_mErrno, "ELAST", eELAST);
#endif
#ifdef ELAST
        defined_error("ELAST", ELAST)
#else
        undefined_error("ELAST")
#endif
